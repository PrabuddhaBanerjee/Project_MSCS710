# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body2(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, origin: str=None, destination: str=None, year: int=None, month: int=None, day: int=None):  # noqa: E501
        """Body2 - a model defined in Swagger

        :param origin: The origin of this Body2.  # noqa: E501
        :type origin: str
        :param destination: The destination of this Body2.  # noqa: E501
        :type destination: str
        :param year: The year of this Body2.  # noqa: E501
        :type year: int
        :param month: The month of this Body2.  # noqa: E501
        :type month: int
        :param day: The day of this Body2.  # noqa: E501
        :type day: int
        """
        self.swagger_types = {
            'origin': str,
            'destination': str,
            'year': int,
            'month': int,
            'day': int
        }

        self.attribute_map = {
            'origin': 'origin',
            'destination': 'destination',
            'year': 'year',
            'month': 'month',
            'day': 'day'
        }
        self._origin = origin
        self._destination = destination
        self._year = year
        self._month = month
        self._day = day

    @classmethod
    def from_dict(cls, dikt) -> 'Body2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_2 of this Body2.  # noqa: E501
        :rtype: Body2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self) -> str:
        """Gets the origin of this Body2.


        :return: The origin of this Body2.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this Body2.


        :param origin: The origin of this Body2.
        :type origin: str
        """

        self._origin = origin

    @property
    def destination(self) -> str:
        """Gets the destination of this Body2.


        :return: The destination of this Body2.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: str):
        """Sets the destination of this Body2.


        :param destination: The destination of this Body2.
        :type destination: str
        """

        self._destination = destination

    @property
    def year(self) -> int:
        """Gets the year of this Body2.


        :return: The year of this Body2.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Body2.


        :param year: The year of this Body2.
        :type year: int
        """

        self._year = year

    @property
    def month(self) -> int:
        """Gets the month of this Body2.


        :return: The month of this Body2.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month: int):
        """Sets the month of this Body2.


        :param month: The month of this Body2.
        :type month: int
        """

        self._month = month

    @property
    def day(self) -> int:
        """Gets the day of this Body2.


        :return: The day of this Body2.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day: int):
        """Sets the day of this Body2.


        :param day: The day of this Body2.
        :type day: int
        """

        self._day = day
